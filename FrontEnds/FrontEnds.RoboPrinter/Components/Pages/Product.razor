@page "/product"

@using Entities
@using BackEnds.RoboPrinter.Models
@using BackEnds.RoboPrinter.Models.Dto
@using static UseCases.core.IRobotService

@inject Controller controller
@inject IJSRuntime jsRuntime
@inject IStringLocalizer<Common> localizer
@inject UserData userData

<PageTitle>Products</PageTitle>

<div class="row mb-3">
    <div class="col-sm-6">
        <label>@localizer["Prodotto"]:</label>
        <select class="form-select" value=@_selectedProductId @onchange="UpdateSelectedProduct">
            <option value="0">@localizer["SelezionaProdotto"]</option>
            @foreach (var product in _products)
            {
                <option value="@product.Id">@product.Description</option>
            }
        </select>
    </div>
    <div class="col text-end">
        <button class="btn btn-danger" disabled="@(!IsUserEnabled())"
            @onclick="DeleteSelectedProduct">@localizer["Elimina"]</button>
    </div>
</div>

@* <div class="row"> *@
@*     <div class="col">
        <button class="btn btn-primary me-2" @onclick="ExecuteCycle" >@localizer["AvviaCicloSingolo"]</button>
        <button class="btn btn-primary me-2" @onclick="() => ToggleAutomaticCycle(true)" >@localizer["AvviaCicloContinuo"]</button>
    </div> *@
@* </div> *@
<div class="row">
    <div class="col">
        @*<button class="btn btn-primary me-2" @onclick="ExecuteCycle">@localizer["AVVIA CICLO MANUALE"]</button>*@
        @* <button class="btn btn-primary me-2" @onclick="() => ToggleAutomaticCycle(true)">@localizer["AvviaCicloContinuo"]</button> *@
    </div>

    <div class="col text-end">
        <div class="btn-group me-2" role="group">
            <button class="btn btn-primary me-2" @onclick="ExecuteCycle">@localizer["TEST CICLO"]</button>
            <button class="btn btn-primary me-2" @onclick="() => ToggleAutomaticCycle(autoCycleToggle)">@localizer["CICLO CONTINUO ON/OFF"]</button> 
        </div>

        <div class="btn-group me-2" role="group">
            <button class="btn btn-primary me-2" @onclick="controller.StartDragRobot">START DRAG</button>
            <button class="btn btn-primary" @onclick="controller.StopDragRobot">STOP DRAG</button>
        </div>
        <div class="btn-group" role="group">
            <button class="btn btn-primary me-2" @onclick="DOBOTReset">RESET</button>
            <button class="btn btn-primary" @onclick="controller.ReturnToHomePosition">HOME</button>
        </div
        @if (showMessage)
            {
                <div class="alert alert-info">
                    @statusMessage
                </div>
            }
    </div>
</div>


@if (_routeStepsPick.Any() && _routeStepsApply.Any())
{
    <p></p>
    <div class="row col-12">
        <div class="col-9">
            <table>
                <thead>
                    <tr style="text-align:center">
                        <th></th>
                        <th>Pick</th>
                        <th>X</th>
                        <th>Y</th>
                        <th>Z</th>
                        <th>Yaw</th>
                        <th>Pitch</th>
                        <th>Roll</th>
                        <th>@localizer["Velocità"]</th>
                        <th>@localizer["Safe"]</th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var routeStep in _routeStepsPick)
                    {
                        <tr style="border-collapse:collapse; width:100%">
                            <td>@routeStep.StepOrder</td>
                            <td><input type="text" class="@GetBackgroundColor(routeStep.RobotPoint) tablet-first" readonly @bind="routeStep.RobotPoint.PointType.Description" /></td>
                            <td><input type="number" class="@GetBackgroundColor(routeStep.RobotPoint) tablet" readonly @bind="routeStep.RobotPoint.X" /></td>
                            <td><input type="number" class="tablet @GetBackgroundColor(routeStep.RobotPoint)" readonly @bind="routeStep.RobotPoint.Y" /></td>
                            <td><input type="number" class="tablet @GetBackgroundColor(routeStep.RobotPoint)" readonly @bind="routeStep.RobotPoint.Z" /></td>
                            <td><input type="number" class="tablet @GetBackgroundColor(routeStep.RobotPoint)" readonly @bind="routeStep.RobotPoint.Yaw" /></td>
                            <td><input type="number" class="tablet @GetBackgroundColor(routeStep.RobotPoint)" readonly @bind="routeStep.RobotPoint.Pitch" /></td>
                            <td><input type="number" class="tablet @GetBackgroundColor(routeStep.RobotPoint)" readonly @bind="routeStep.RobotPoint.Roll" /></td>
                            <td><input type="number" class="tablet" @bind="routeStep.Speed" min="1" max="100" disabled="@(!IsUserEnabled())"
                                @onblur="() => OnParamLostFocus(routeStep)" /></td>
                            <td><input type="checkbox" class="tablet" @bind="routeStep.ClearZone" disabled="@(!IsUserEnabled())"
                                @onblur="() => OnParamLostFocus(routeStep)" /></td>
                            <td><button class="btn btn-primary" disabled="@(!IsUserEnabled())"
                                @onclick="() => GoToPosition(routeStep)">@localizer["VaiA"]</button></td>
                            <td><button class="btn btn-primary" style="background-color: green" disabled="@(!IsUserEnabled())"
                                @onclick="() => SaveRouteStep(routeStep)">@localizer["Salva"]</button></td>
                            <td><button class="btn btn-primary" style="background-color: red" disabled="@(!CanDeletePoint(routeStep))" 
                                @onclick="() => DeleteRouteStep(routeStep)">@localizer["Elimina"]</button></td>
                            <td>
                                <button class="btn btn-primary" style="background-color: blue" disabled="@(!IsUserEnabled())"
                                    @onclick="() => AddNewRouteStep(routeStep)">
                                    <i class="fas fa-plus"></i>
                                </button>
                                </td>
                        </tr>
                    }
                </tbody>
            </table>
        
        <p></p>
        <p></p>
        
            <table>
                <thead>
                    <tr style="text-align:center">
                        <th></th>
                        <th>Application</th>
                        <th>X</th>
                        <th>Y</th>
                        <th>Z</th>
                        <th>Yaw</th>
                        <th>Pitch</th>
                        <th>Roll</th>
                        <th>@localizer["Velocità"]</th>
                        <th>@localizer["Safe"]</th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var routeStep in _routeStepsApply)
                    {
                        <tr style="border-collapse:collapse; width:100%">
                            <td>@routeStep.StepOrder</td>
                            <td><input type="text" class="@GetBackgroundColor(routeStep.RobotPoint) tablet-first" readonly @bind="routeStep.RobotPoint.PointType.Description" /></td>
                            <td><input type="number" class="@GetBackgroundColor(routeStep.RobotPoint) tablet" readonly @bind="routeStep.RobotPoint.X" /></td>
                            <td><input type="number" class="tablet @GetBackgroundColor(routeStep.RobotPoint)" readonly @bind="routeStep.RobotPoint.Y" /></td>
                            <td><input type="number" class="tablet @GetBackgroundColor(routeStep.RobotPoint)" readonly @bind="routeStep.RobotPoint.Z" /></td>
                            <td><input type="number" class="tablet @GetBackgroundColor(routeStep.RobotPoint)" readonly @bind="routeStep.RobotPoint.Yaw" /></td>
                            <td><input type="number" class="tablet @GetBackgroundColor(routeStep.RobotPoint)" readonly @bind="routeStep.RobotPoint.Pitch" /></td>
                            <td><input type="number" class="tablet @GetBackgroundColor(routeStep.RobotPoint)" readonly @bind="routeStep.RobotPoint.Roll" /></td>
                            <td><input type="number" class="tablet" @bind="routeStep.Speed" min="1" max="100" disabled="@(!IsUserEnabled())"
                                @onblur="() => OnParamLostFocus(routeStep)" /></td>
                            <td><input type="checkbox" class="tablet" @bind="routeStep.ClearZone" disabled="@(!IsUserEnabled())"
                                @onblur="() => OnParamLostFocus(routeStep)" /></td>
                            <td><button class="btn btn-primary" disabled="@(!IsUserEnabled())"
                                @onclick="() => GoToPosition(routeStep)">@localizer["VaiA"]</button></td>
                            <td><button class="btn btn-primary" style="background-color: green" disabled="@(!IsUserEnabled())"
                                @onclick="() => SaveRouteStep(routeStep)">@localizer["Salva"]</button></td>
                            <td><button class="btn btn-primary" style="background-color: red" disabled="@(!CanDeletePoint(routeStep))" 
                                @onclick="() => DeleteRouteStep(routeStep)">@localizer["Elimina"]</button></td>
                            <td><button class="btn btn-primary" style="background-color: blue" disabled="@(!IsUserEnabled())"
                                @onclick="() => AddNewRouteStep(routeStep)"><i class="fas fa-plus"></i></button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
       
        <div class="col-3 bottomSpace">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0 mt-2">Jog Controls</h5>
                    <img src="images/CoordCobot.png" class="card-img-top" alt="Jog Controls Image">
                </div>

                <div class="row row-no-gutters btn-spacing">
                    <div class="col-12">
                        <label for="speedSlider">@localizer["Override:"]</label>
                        <span>@_robotOverride</span>
                        <input type="range" id="speedSlider" class="form-range" min="1" max="100" value="@_robotOverride" disabled="@(!IsUserEnabled())"
                            @onchange="UpdateRobotOverride" />
                    </div>
                </div>
                <div class="card-body">
                    <div class="row row-no-gutters btn-spacing">
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.X, true)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.X, true)" @ontouchend="StopMove">X+</button>
                        </div>
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.X, false)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.X, false)" @ontouchend="StopMove">X-</button>
                        </div>
                    </div>
                    <div class="row row-no-gutters btn-spacing">
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.Y, true)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.Y, true)" @ontouchend="StopMove">Y+</button>
                        </div>
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.Y, false)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.Y, false)" @ontouchend="StopMove">Y-</button>
                        </div>
                    </div>
                    <div class="row row-no-gutters btn-spacing">
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.Z, true)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.Z, true)" @ontouchend="StopMove">Z+</button>
                        </div>
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.Z, false)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.Z, false)" @ontouchend="StopMove">Z-</button>
                        </div>
                    </div>
                    <div class="row row-no-gutters btn-spacing">
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.Yaw, true)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.Yaw, true)" @ontouchend="StopMove">X Rotation +</button>
                        </div>
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.Yaw, false)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.Yaw, false)" @ontouchend="StopMove">X Rotation -</button>
                        </div>
                    </div>
                    <div class="row row-no-gutters btn-spacing">
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.Pitch, true)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.Pitch, true)" @ontouchend="StopMove">Y Rotation +</button>
                        </div>
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.Pitch, false)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.Pitch, false)" @ontouchend="StopMove">Y Rotation -</button>
                        </div>
                    </div>
                    <div class="row row-no-gutters btn-spacing">
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.Roll, true)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.Roll, true)" @ontouchend="StopMove">Z Rotation +</button>
                        </div>
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.Roll, false)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.Roll, false)" @ontouchend="StopMove">Z Rotation -</button>
                        </div>
                    </div>
                    <div class="row row-no-gutters btn-spacing">
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.J1, true)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.J1, true)" @ontouchend="StopMove">J1+</button>
                        </div>
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.J1, false)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.J1, false)" @ontouchend="StopMove">J1-</button>
                        </div>
                    </div>
                    <div class="row row-no-gutters btn-spacing">
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.J2, true)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.J2, true)" @ontouchend="StopMove">J2+</button>
                        </div>
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.J2, false)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.J2, false)" @ontouchend="StopMove">J2-</button>
                        </div>
                    </div>
                    <div class="row row-no-gutters btn-spacing">
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.J3, true)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.J3, true)" @ontouchend="StopMove">J3+</button>
                        </div>
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom"disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.J3, false)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.J3, false)" @ontouchend="StopMove">J3-</button>
                        </div>
                    </div>
                    <div class="row row-no-gutters btn-spacing">
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.J4, true)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.J4, true)" @ontouchend="StopMove">J4+</button>
                        </div>
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.J4, false)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.J4, false)" @ontouchend="StopMove">J4-</button>
                        </div>
                    </div>
                    <div class="row row-no-gutters btn-spacing">
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.J5, true)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.J5, true)" @ontouchend="StopMove">J5+</button>
                        </div>
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.J5, false)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.J5, false)" @ontouchend="StopMove">J5-</button>
                        </div>
                    </div>
                    <div class="row row-no-gutters btn-spacing">
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.J6, true)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.J6, true)" @ontouchend="StopMove">J6+</button>
                        </div>
                        <div class="col">
                            <button class="btn btn-primary w-100 btn-sm-custom" disabled="@(!IsUserEnabled())" @onmousedown="() => MoveJog(JogMovement.J6, false)" @onmouseup="StopMove" @ontouchstart="() => MoveJog(JogMovement.J6, false)" @ontouchend="StopMove">J6-</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private ProductDto[] _products { get; set; } = [];
    private RouteTypeDto[] _routeTypes { get; set; } = [];
    private RouteStepDto[] _routeStepsPick { get; set; } = [];
    private RouteStepDto[] _routeStepsApply { get; set; } = [];
    private CancellationTokenSource _cts = new();
    private int _selectedProductId;
    private RobotPosition _currentRobotPosition = new();
    bool isUpdating = false;
    private int _activeOperativeModeId = 0;
    private int _robotOverride = 50;
    private bool autoCycleToggle = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        var robotReadingTimer = new System.Timers.Timer(500);
        robotReadingTimer.Elapsed += (s, e) =>
        {
            _currentRobotPosition = controller.GetCurrentRobotPosition();
            InvokeAsync(StateHasChanged);
        };
        robotReadingTimer.AutoReset = true;
        robotReadingTimer.Start();
        _robotOverride = controller.GetRobotSpeed();
    }

    private async Task LoadProducts()
    {
        _products = await controller.GetProducts();
        _routeTypes = await controller.GetRouteTypes();
        _selectedProductId = await controller.GetActiveProduct();
        await LoadRouteSteps();        
    }

    private async Task AddNewRouteStep(RouteStepDto routeStep)
    {
        await controller.AddNewRouteStep(routeStep);
        await LoadRouteSteps();
    }

    private void MoveJog(JogMovement jogMovement, bool forward)
    {
        controller.MoveJog(jogMovement, forward);
    }

    private void StopMove()
    {
        controller.StopJog();
    }

    private bool CanDeletePoint(RouteStepDto routeStep)
    {
        return IsUserEnabled() && 
            routeStep.RobotPoint.PointType.Description.Contains("Clearance"); 
    }

    private async Task GoToPosition(RouteStepDto routeStepDto)
    {
        var robotPosition = new RobotPosition(routeStepDto.RobotPoint.X, routeStepDto.RobotPoint.Y, routeStepDto.RobotPoint.Z, routeStepDto.RobotPoint.Yaw, routeStepDto.RobotPoint.Pitch, routeStepDto.RobotPoint.Roll);
        await controller.GoToPosition(robotPosition, routeStepDto.Id, routeStepDto.Speed);
    }

    private async Task SaveRouteStep(RouteStepDto routeStepDto)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Sei sicuro di voler salvare?");
        if (confirmed)
        {
            await controller.UpdateStep(routeStepDto);
            await LoadRouteSteps();
        }
    }

    private async Task DeleteRouteStep(RouteStepDto routeStepDto)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Sei sicuro di voler eliminare?");
        if (confirmed)
        {
            await controller.DeleteStep(routeStepDto);
            await LoadRouteSteps();
        }
    }

    private async Task DeleteSelectedProduct()
    {
        if (_selectedProductId == 0) return;

        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Sei sicuro di voler eliminare?");
        if (confirmed)
        {
            await controller.DeleteProduct(_selectedProductId);
            _routeStepsPick = [];
            _routeStepsApply = [];
            _selectedProductId = 0;
            await controller.SaveActiveProduct(_selectedProductId);
            await LoadProducts();
        }
    }

    private async Task UpdateSelectedProduct(ChangeEventArgs e)
    {
        _selectedProductId = int.Parse(e.Value.ToString());
        await controller.SaveActiveProduct(_selectedProductId);
        await LoadRouteSteps();
    }

    private async Task LoadRouteSteps()
    {
        if (_selectedProductId == 0) return;

        _routeStepsPick = await controller.GetRouteSteps(_selectedProductId, 1);
        _routeStepsApply = await controller.GetRouteSteps(_selectedProductId, 2);
    }

    private async Task ExecuteCycle()
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Confermi?");
        if (confirmed)
        {
            if (_selectedProductId == 0) return;
            _cts = new();
            await Task.Run(() => controller.SimulateCycle(_selectedProductId));            
        }
    }

    private async Task ToggleAutomaticCycle(bool startAndStop)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Confermi?");
        if (confirmed)
        {
            autoCycleToggle = !startAndStop;

            if (autoCycleToggle)
            {
                if (_selectedProductId == 0) return;
                _cts = new();
                await Task.Run(() => controller.ToggleAutomaticCycle(_selectedProductId, _cts.Token));
            }
            else
            {
                _cts.Cancel();
            }
        }
    }

    private string GetBackgroundColor(RobotPoint value)
    {
        return IsCurrentPosition(value) ? "highlight" : "not-highlight";
    }

    private bool IsCurrentPosition(RobotPoint robotPoint)
    {
        if (robotPoint is null || _currentRobotPosition is null)
            return false;

        return IsWithinTolerance((float)robotPoint.X, (float)_currentRobotPosition.X) &&
               IsWithinTolerance((float)robotPoint.Y, (float)_currentRobotPosition.Y) &&
               IsWithinTolerance((float)robotPoint.Z, (float)_currentRobotPosition.Z) &&
               IsWithinTolerance((float)robotPoint.Yaw, (float)_currentRobotPosition.Yaw) &&
               IsWithinTolerance((float)robotPoint.Pitch, (float)_currentRobotPosition.Pitch) &&
               IsWithinTolerance((float)robotPoint.Roll, (float)_currentRobotPosition.Roll);
    }

    private bool IsWithinTolerance(float value1, float value2, float tolerance = 0.02f)
    {
        return Math.Abs(value1 - value2) <= tolerance;

    }

    // Aggiorno i valori 'Speed' e 'Flag Fuori Ingombro' su Database con l'evento di 'lost_focus delle textbox
    private async Task OnParamLostFocus(RouteStepDto routeStep)
    {
        if (userData.Roles.Contains(Utility.SD.OperatorRole)) return;

        if (isUpdating) // Controlla se un aggiornamento è già in corso
            return;

        isUpdating = true;

        if (routeStep.Speed < 1)
        {
            routeStep.Speed = 1;
        }
        else if (routeStep.Speed > 100)
        {
            routeStep.Speed = 100;
        }

        try
        {
            await SaveStepParameters(routeStep);
            await LoadRouteSteps();
        }
        finally
        {
            isUpdating = false;
        }
    }

    private async Task SaveStepParameters(RouteStepDto routeStepDto)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Sei sicuro di voler salvare?");
        if (confirmed)
        {
            await controller.UpdateStepParameters(routeStepDto);
        }
        else
        {
            // Ricarico i valori precedenti
            await LoadRouteSteps();
        }
    }

    public async Task<int> GetOperativeMode()
    {
        _activeOperativeModeId = await controller.GetActiveOperativeMode();
        return _activeOperativeModeId;
    }

    public async Task<bool> isManualOperativeMode()
    {
        _activeOperativeModeId = await controller.GetActiveOperativeMode();
        return !(_activeOperativeModeId == 1);
    }

    private void UpdateRobotOverride(ChangeEventArgs e)
    {
        _robotOverride = int.Parse(e.Value.ToString());

        controller.SetDobotSpeed(_robotOverride);
    }


    private async Task DOBOTReset()
    {
        ShowStatusMessage("Avvio procedura di Reset Robot. Attendere...");
        await Task.Delay(1000); // Simula un'attesa per la procedura di reset
        controller.Reset();
        ShowStatusMessage("Fine procedura.");
    }

    private bool IsUserEnabled()
    {
        return userData.Roles.Contains(Utility.SD.AdminRole);
    }


    private string statusMessage = string.Empty; // Il messaggio di stato
    private bool showMessage = false; // Controlla la visibilità del messaggio
    private System.Timers.Timer messageTimer;

    private void ShowStatusMessage(string message)
    {
        statusMessage = message;
        showMessage = true;
        InvokeAsync(StateHasChanged); // Aggiorna la UI

        // Imposta un timer per nascondere il messaggio dopo qualche secondo
        messageTimer = new System.Timers.Timer(5000); // 5 secondi
        messageTimer.Elapsed += (s, e) => HideStatusMessage();
        messageTimer.AutoReset = false;
        messageTimer.Start();
    }

    private void HideStatusMessage()
    {
        showMessage = false;
        InvokeAsync(StateHasChanged); // Aggiorna la UI
    }
}


<style>
    .highlight {
        background-color: lightgreen;
    }

    .not-highlight {
        background-color: lightskyblue;
    }

    .tablet-first {
        font-size: 100%;
        text-align: right;
    }

    .tablet {
        font-size: 100%;
        width: 100%;
        padding: 1;
        text-align: center;
    }

    .btn-sm-custom {
        height: 1.45rem; /* Regola l'altezza come desiderato 1.0 */
        padding: 0.1rem 0.25rem; /* Regola il padding per centrare il testo 0.5rem 0.75rem */
        font-size: 0.575rem; /* Regola la dimensione del testo 0.875 */
    }

    .btn-spacing {
        margin-bottom: 0.1rem; /* Regola il valore per avvicinare i pulsanti verticalmente */
    }

    .row-no-gutters {
        margin-right: 0;
        margin-left: 0;
    }

    .row-no-gutters > [class*='col-'] {
            padding-right: 0;
            padding-left: 0;
    }
    .bottomSpace {
        margin-bottom: 80px;
    }
</style>


